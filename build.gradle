/* groovylint-disable CompileStatic, DuplicateNumberLiteral, DuplicateStringLiteral, MethodReturnTypeRequired */
/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn how to create Gradle builds at https://guides.gradle.org/creating-new-gradle-builds
 */
wrapper {
    gradleVersion = 6.7
}

allprojects {
    group = 'org.java.cuong.exp'
    version = '1.0-SNAPSHOT'
    apply from: "$rootProject.projectDir/buildConfiguration/commonConfiguration.gradle"
    repositories {
        mavenLocal()
        maven {
                url = 'https://nexus.soft-labs.org/repository/maven-public'
        }
    }
}
def javaSubProjects() {
    subprojects.findAll { project -> project != project.project(':platform') }
}
configure(javaSubProjects()) {
    apply plugin: 'java-library'
    apply plugin: 'groovy'
    sourceCompatibility = 11
    targetCompatibility = 11
    dependencies {
        api platform(project(':platform'))
        compileOnly 'org.codehaus.groovy:groovy-all'
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok:1.18.12'

        testCompileOnly 'org.projectlombok:lombok'
        testAnnotationProcessor 'org.projectlombok:lombok:1.18.12'
        compileOnly 'org.slf4j:slf4j-api'
        runtimeOnly 'org.slf4j:slf4j-log4j12'

        testImplementation configurations.testFramework
    }
    test {
        useJUnitPlatform()
        afterTest { desc, result ->
            def executionTime = result.endTime - result.startTime
            println "Executing test ${desc.name} [${desc.className}] " +
            "with result: ${result.resultType} in ${executionTime} ms"
        }
        testLogging {
            showStandardStreams = true

//            // set options for log level LIFECYCLE
//            events "failed"
//            exceptionFormat "short"
//
//            // set options for log level DEBUG
//            debug {
//                events "started", "skipped", "failed"
//                exceptionFormat "full"
//            }
//
//            // remove standard output/error logging from --info builds
//            // by assigning only 'failed' and 'skipped' events
//            info.events = ["failed", "skipped"]
        }
    }
}
